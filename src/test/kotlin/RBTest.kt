import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import src.trees.RedBlackTree

class RBTest {
    @Test
    fun testStruct() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        val arr = t.iter()
        val expected = mutableListOf(Pair(0, 1), Pair(2, 1), Pair(5, 1), Pair(6, 1), Pair(10, 1), Pair(11, 1), Pair(13, 1), Pair(15, 1), Pair(20, 1))
        assertEquals(expected, arr)
    }

    @Test
    fun testDeletionOfNonExistentNode() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        assertEquals(null, t.delete(100))
    }

    @Test
    fun testDeletionFromEmptyTree() {
        val t = RedBlackTree<Int>()
        assertEquals(null, t.delete(100))
    }

    @Test
    fun testDeletion() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        t.delete(0)
        val arr = t.iter()
        val expected = mutableListOf(Pair(2, 1), Pair(5, 1), Pair(6, 1), Pair(10, 1), Pair(11, 1), Pair(13, 1), Pair(15, 1), Pair(20, 1))
        assertEquals(expected, arr)
    }

    @Test
    fun testDeletionOfNodeWithOneChild() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        t.delete(2)
        val arr = t.iter()
        val expected = mutableListOf(Pair(0, 1), Pair(5, 1), Pair(6, 1), Pair(10, 1), Pair(11, 1), Pair(13, 1), Pair(15, 1), Pair(20, 1))
        assertEquals(expected, arr)
    }

    @Test
    fun testDeletionOfNodeWithTwoChildren() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        t.delete(5)
        val arr = t.iter()
        val expected = mutableListOf(Pair(0, 1), Pair(2, 1), Pair(6, 1), Pair(10, 1), Pair(11, 1), Pair(13, 1), Pair(15, 1), Pair(20, 1))
        assertEquals(expected, arr)
    }
    @Test
    fun testDeletionOfRoot() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        t.delete(10)
        val arr = t.iter()
        val expected = mutableListOf(Pair(0, 1), Pair(2, 1), Pair(5, 1), Pair(6, 1), Pair(11, 1), Pair(13, 1), Pair(15, 1), Pair(20, 1))
        assertEquals(expected, arr)
    }

    @Test
    fun testBalanceRight() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(15, 1)
        t.add(20, 1)
        val arr = t.iter()
        val expected = mutableListOf(Pair(10, 1), Pair(15, 1), Pair(20, 1))
        assertEquals(expected, arr)
    }

    @Test
    fun testBalanceLeft() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(5, 1)
        t.add(0, 1)
        val arr = t.iter()
        val expected = mutableListOf(Pair(0, 1), Pair(5, 1), Pair(10, 1))
        assertEquals(expected, arr)
    }

    @Test
    fun testFindNonExistent() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        assertEquals(null, t.find(999))
    }
    @Test
    fun testFind() {
        val t = RedBlackTree<Int>()
        t.add(10, 1)
        t.add(10, 1)
        t.add(15, 1)
        t.add(5, 1)
        t.add(20, 1)
        t.add(13, 1)
        t.add(6, 1)
        t.add(2, 1)
        t.add(0, 1)
        t.add(11, 1)
        assertEquals(Pair(13, 1), Pair(t.find(13)!!.key, 1))
    }

    @Test
    fun testEmptyTree() {
        val t = RedBlackTree<Int>()
        assertEquals(mutableListOf<Pair<Int, Any>>(), t.iter())
    }

    @Test
    fun random1(){
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(562, 726)
        tree.add(562, 726)
        std.put(348, 916)
        tree.add(348, 916)
        std.put(6, 594)
        tree.add(6, 594)
        std.put(872, 515)
        tree.add(872, 515)
        std.put(960, 976)
        tree.add(960, 976)
        std.put(169, 662)
        tree.add(169, 662)
        std.put(317, 529)
        tree.add(317, 529)
        std.put(702, 789)
        tree.add(702, 789)
        std.put(255, 74)
        tree.add(255, 74)
        std.put(574, 330)
        tree.add(574, 330)
        std.put(338, 584)
        tree.add(338, 584)
        std.put(238, 31)
        tree.add(238, 31)
        std.put(172, 929)
        tree.add(172, 929)
        std.put(967, 19)
        tree.add(967, 19)
        std.put(654, 780)
        tree.add(654, 780)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }

    @Test
    fun random2() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(287, 890)
        tree.add(287, 890)
        std.put(730, 1)
        tree.add(730, 1)
        std.put(703, 262)
        tree.add(703, 262)
        std.put(453, 338)
        tree.add(453, 338)
        std.put(223, 935)
        tree.add(223, 935)
        std.put(872, 478)
        tree.add(872, 478)
        std.put(718, 979)
        tree.add(718, 979)
        std.put(886, 768)
        tree.add(886, 768)
        std.put(336, 703)
        tree.add(336, 703)
        std.put(672, 167)
        tree.add(672, 167)
        std.put(606, 498)
        tree.add(606, 498)
        std.put(66, 647)
        tree.add(66, 647)
        std.put(769, 665)
        tree.add(769, 665)
        std.put(827, 852)
        tree.add(827, 852)
        std.put(144, 533)
        tree.add(144, 533)
        std.remove(2)
        tree.delete(2)
        std.remove(306)
        tree.delete(306)
        std.remove(494)
        tree.delete(494)
        std.remove(328)
        tree.delete(328)
        std.remove(97)
        tree.delete(97)
        std.remove(414)
        tree.delete(414)
        std.remove(693)
        tree.delete(693)
        std.remove(562)
        tree.delete(562)
        std.remove(625)
        tree.delete(625)
        std.remove(697)
        tree.delete(697)
        std.remove(755)
        tree.delete(755)
        std.remove(576)
        tree.delete(576)
        std.remove(462)
        tree.delete(462)
        std.remove(319)
        tree.delete(319)
        std.remove(778)
        tree.delete(778)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }

    @Test
    fun random3() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(706, 841)
        tree.add(706, 841)
        std.put(481, 768)
        tree.add(481, 768)
        std.put(443, 990)
        tree.add(443, 990)
        std.put(671, 914)
        tree.add(671, 914)
        std.put(19, 924)
        tree.add(19, 924)
        std.put(419, 876)
        tree.add(419, 876)
        std.put(204, 791)
        tree.add(204, 791)
        std.put(955, 890)
        tree.add(955, 890)
        std.put(899, 354)
        tree.add(899, 354)
        std.put(989, 367)
        tree.add(989, 367)
        std.put(197, 73)
        tree.add(197, 73)
        std.put(219, 819)
        tree.add(219, 819)
        std.put(25, 678)
        tree.add(25, 678)
        std.put(455, 675)
        tree.add(455, 675)
        std.put(226, 679)
        tree.add(226, 679)
        std.remove(807)
        tree.delete(807)
        std.remove(306)
        tree.delete(306)
        std.remove(636)
        tree.delete(636)
        std.remove(537)
        tree.delete(537)
        std.remove(914)
        tree.delete(914)
        std.remove(300)
        tree.delete(300)
        std.remove(812)
        tree.delete(812)
        std.remove(795)
        tree.delete(795)
        std.remove(96)
        tree.delete(96)
        std.remove(832)
        tree.delete(832)
        std.remove(55)
        tree.delete(55)
        std.remove(546)
        tree.delete(546)
        std.remove(372)
        tree.delete(372)
        std.remove(85)
        tree.delete(85)
        std.remove(619)
        tree.delete(619)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
}