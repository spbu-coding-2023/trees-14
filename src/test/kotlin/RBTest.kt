import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test

class RBTest {
    @Test
    fun intInsertion1() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(562, 726)
        tree.add(562, 726)
        std.put(348, 916)
        tree.add(348, 916)
        std.put(6, 594)
        tree.add(6, 594)
        std.put(872, 515)
        tree.add(872, 515)
        std.put(960, 976)
        tree.add(960, 976)
        std.put(169, 662)
        tree.add(169, 662)
        std.put(317, 529)
        tree.add(317, 529)
        std.put(702, 789)
        tree.add(702, 789)
        std.put(255, 74)
        tree.add(255, 74)
        std.put(574, 330)
        tree.add(574, 330)
        std.put(338, 584)
        tree.add(338, 584)
        std.put(238, 31)
        tree.add(238, 31)
        std.put(172, 929)
        tree.add(172, 929)
        std.put(967, 19)
        tree.add(967, 19)
        std.put(654, 780)
        tree.add(654, 780)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion2() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(478, 336)
        tree.add(478, 336)
        std.put(66, 342)
        tree.add(66, 342)
        std.put(13, 415)
        tree.add(13, 415)
        std.put(842, 908)
        tree.add(842, 908)
        std.put(283, 652)
        tree.add(283, 652)
        std.put(921, 571)
        tree.add(921, 571)
        std.put(848, 7)
        tree.add(848, 7)
        std.put(560, 287)
        tree.add(560, 287)
        std.put(890, 730)
        tree.add(890, 730)
        std.put(1, 703)
        tree.add(1, 703)
        std.put(262, 453)
        tree.add(262, 453)
        std.put(338, 223)
        tree.add(338, 223)
        std.put(935, 872)
        tree.add(935, 872)
        std.put(478, 718)
        tree.add(478, 718)
        std.put(979, 886)
        tree.add(979, 886)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion3() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(768, 336)
        tree.add(768, 336)
        std.put(703, 672)
        tree.add(703, 672)
        std.put(167, 606)
        tree.add(167, 606)
        std.put(498, 66)
        tree.add(498, 66)
        std.put(647, 769)
        tree.add(647, 769)
        std.put(665, 827)
        tree.add(665, 827)
        std.put(852, 144)
        tree.add(852, 144)
        std.put(533, 2)
        tree.add(533, 2)
        std.put(306, 494)
        tree.add(306, 494)
        std.put(328, 97)
        tree.add(328, 97)
        std.put(414, 693)
        tree.add(414, 693)
        std.put(562, 625)
        tree.add(562, 625)
        std.put(697, 755)
        tree.add(697, 755)
        std.put(576, 462)
        tree.add(576, 462)
        std.put(319, 778)
        tree.add(319, 778)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion4() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(995, 752)
        tree.add(995, 752)
        std.put(583, 977)
        tree.add(583, 977)
        std.put(397, 178)
        tree.add(397, 178)
        std.put(409, 450)
        tree.add(409, 450)
        std.put(143, 836)
        tree.add(143, 836)
        std.put(633, 576)
        tree.add(633, 576)
        std.put(355, 400)
        tree.add(355, 400)
        std.put(153, 792)
        tree.add(153, 792)
        std.put(98, 492)
        tree.add(98, 492)
        std.put(153, 542)
        tree.add(153, 542)
        std.put(838, 740)
        tree.add(838, 740)
        std.put(619, 125)
        tree.add(619, 125)
        std.put(840, 129)
        tree.add(840, 129)
        std.put(115, 766)
        tree.add(115, 766)
        std.put(803, 442)
        tree.add(803, 442)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion5() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(257, 208)
        tree.add(257, 208)
        std.put(66, 888)
        tree.add(66, 888)
        std.put(347, 339)
        tree.add(347, 339)
        std.put(494, 838)
        tree.add(494, 838)
        std.put(844, 925)
        tree.add(844, 925)
        std.put(381, 798)
        tree.add(381, 798)
        std.put(451, 317)
        tree.add(451, 317)
        std.put(278, 500)
        tree.add(278, 500)
        std.put(197, 135)
        tree.add(197, 135)
        std.put(329, 454)
        tree.add(329, 454)
        std.put(709, 547)
        tree.add(709, 547)
        std.put(203, 882)
        tree.add(203, 882)
        std.put(464, 726)
        tree.add(464, 726)
        std.put(338, 346)
        tree.add(338, 346)
        std.put(985, 955)
        tree.add(985, 955)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion6() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(771, 598)
        tree.add(771, 598)
        std.put(130, 180)
        tree.add(130, 180)
        std.put(55, 350)
        tree.add(55, 350)
        std.put(504, 761)
        tree.add(504, 761)
        std.put(553, 514)
        tree.add(553, 514)
        std.put(430, 853)
        tree.add(430, 853)
        std.put(424, 360)
        tree.add(424, 360)
        std.put(74, 765)
        tree.add(74, 765)
        std.put(134, 204)
        tree.add(134, 204)
        std.put(957, 460)
        tree.add(957, 460)
        std.put(170, 220)
        tree.add(170, 220)
        std.put(419, 395)
        tree.add(419, 395)
        std.put(453, 140)
        tree.add(453, 140)
        std.put(23, 735)
        tree.add(23, 735)
        std.put(559, 585)
        tree.add(559, 585)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion7() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(706, 841)
        tree.add(706, 841)
        std.put(481, 768)
        tree.add(481, 768)
        std.put(443, 990)
        tree.add(443, 990)
        std.put(671, 914)
        tree.add(671, 914)
        std.put(19, 924)
        tree.add(19, 924)
        std.put(419, 876)
        tree.add(419, 876)
        std.put(204, 791)
        tree.add(204, 791)
        std.put(955, 890)
        tree.add(955, 890)
        std.put(899, 354)
        tree.add(899, 354)
        std.put(989, 367)
        tree.add(989, 367)
        std.put(197, 73)
        tree.add(197, 73)
        std.put(219, 819)
        tree.add(219, 819)
        std.put(25, 678)
        tree.add(25, 678)
        std.put(455, 675)
        tree.add(455, 675)
        std.put(226, 679)
        tree.add(226, 679)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion8() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(807, 306)
        tree.add(807, 306)
        std.put(636, 537)
        tree.add(636, 537)
        std.put(914, 300)
        tree.add(914, 300)
        std.put(812, 795)
        tree.add(812, 795)
        std.put(96, 832)
        tree.add(96, 832)
        std.put(55, 546)
        tree.add(55, 546)
        std.put(372, 85)
        tree.add(372, 85)
        std.put(619, 208)
        tree.add(619, 208)
        std.put(194, 156)
        tree.add(194, 156)
        std.put(417, 300)
        tree.add(417, 300)
        std.put(459, 295)
        tree.add(459, 295)
        std.put(886, 252)
        tree.add(886, 252)
        std.put(444, 341)
        tree.add(444, 341)
        std.put(280, 363)
        tree.add(280, 363)
        std.put(167, 573)
        tree.add(167, 573)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion9() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(612, 842)
        tree.add(612, 842)
        std.put(624, 772)
        tree.add(624, 772)
        std.put(497, 224)
        tree.add(497, 224)
        std.put(983, 340)
        tree.add(983, 340)
        std.put(62, 982)
        tree.add(62, 982)
        std.put(407, 311)
        tree.add(407, 311)
        std.put(546, 353)
        tree.add(546, 353)
        std.put(376, 224)
        tree.add(376, 224)
        std.put(307, 703)
        tree.add(307, 703)
        std.put(411, 867)
        tree.add(411, 867)
        std.put(422, 452)
        tree.add(422, 452)
        std.put(639, 467)
        tree.add(639, 467)
        std.put(187, 572)
        tree.add(187, 572)
        std.put(735, 368)
        tree.add(735, 368)
        std.put(88, 3)
        tree.add(88, 3)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion10() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(563, 101)
        tree.add(563, 101)
        std.put(707, 221)
        tree.add(707, 221)
        std.put(739, 864)
        tree.add(739, 864)
        std.put(833, 980)
        tree.add(833, 980)
        std.put(161, 550)
        tree.add(161, 550)
        std.put(884, 345)
        tree.add(884, 345)
        std.put(961, 973)
        tree.add(961, 973)
        std.put(745, 679)
        tree.add(745, 679)
        std.put(510, 190)
        tree.add(510, 190)
        std.put(555, 245)
        tree.add(555, 245)
        std.put(862, 396)
        tree.add(862, 396)
        std.put(53, 724)
        tree.add(53, 724)
        std.put(398, 735)
        tree.add(398, 735)
        std.put(509, 657)
        tree.add(509, 657)
        std.put(48, 763)
        tree.add(48, 763)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion1() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(562, 726)
        tree.add(562, 726)
        std.put(348, 916)
        tree.add(348, 916)
        std.put(6, 594)
        tree.add(6, 594)
        std.put(872, 515)
        tree.add(872, 515)
        std.put(960, 976)
        tree.add(960, 976)
        std.put(169, 662)
        tree.add(169, 662)
        std.put(317, 529)
        tree.add(317, 529)
        std.put(702, 789)
        tree.add(702, 789)
        std.put(255, 74)
        tree.add(255, 74)
        std.put(574, 330)
        tree.add(574, 330)
        std.put(338, 584)
        tree.add(338, 584)
        std.put(238, 31)
        tree.add(238, 31)
        std.put(172, 929)
        tree.add(172, 929)
        std.put(967, 19)
        tree.add(967, 19)
        std.put(654, 780)
        tree.add(654, 780)
        std.remove(478)
        tree.delete(478)
        std.remove(336)
        tree.delete(336)
        std.remove(66)
        tree.delete(66)
        std.remove(342)
        tree.delete(342)
        std.remove(13)
        tree.delete(13)
        std.remove(415)
        tree.delete(415)
        std.remove(842)
        tree.delete(842)
        std.remove(908)
        tree.delete(908)
        std.remove(283)
        tree.delete(283)
        std.remove(652)
        tree.delete(652)
        std.remove(921)
        tree.delete(921)
        std.remove(571)
        tree.delete(571)
        std.remove(848)
        tree.delete(848)
        std.remove(7)
        tree.delete(7)
        std.remove(560)
        tree.delete(560)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion2() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(287, 890)
        tree.add(287, 890)
        std.put(730, 1)
        tree.add(730, 1)
        std.put(703, 262)
        tree.add(703, 262)
        std.put(453, 338)
        tree.add(453, 338)
        std.put(223, 935)
        tree.add(223, 935)
        std.put(872, 478)
        tree.add(872, 478)
        std.put(718, 979)
        tree.add(718, 979)
        std.put(886, 768)
        tree.add(886, 768)
        std.put(336, 703)
        tree.add(336, 703)
        std.put(672, 167)
        tree.add(672, 167)
        std.put(606, 498)
        tree.add(606, 498)
        std.put(66, 647)
        tree.add(66, 647)
        std.put(769, 665)
        tree.add(769, 665)
        std.put(827, 852)
        tree.add(827, 852)
        std.put(144, 533)
        tree.add(144, 533)
        std.remove(2)
        tree.delete(2)
        std.remove(306)
        tree.delete(306)
        std.remove(494)
        tree.delete(494)
        std.remove(328)
        tree.delete(328)
        std.remove(97)
        tree.delete(97)
        std.remove(414)
        tree.delete(414)
        std.remove(693)
        tree.delete(693)
        std.remove(562)
        tree.delete(562)
        std.remove(625)
        tree.delete(625)
        std.remove(697)
        tree.delete(697)
        std.remove(755)
        tree.delete(755)
        std.remove(576)
        tree.delete(576)
        std.remove(462)
        tree.delete(462)
        std.remove(319)
        tree.delete(319)
        std.remove(778)
        tree.delete(778)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion3() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(995, 752)
        tree.add(995, 752)
        std.put(583, 977)
        tree.add(583, 977)
        std.put(397, 178)
        tree.add(397, 178)
        std.put(409, 450)
        tree.add(409, 450)
        std.put(143, 836)
        tree.add(143, 836)
        std.put(633, 576)
        tree.add(633, 576)
        std.put(355, 400)
        tree.add(355, 400)
        std.put(153, 792)
        tree.add(153, 792)
        std.put(98, 492)
        tree.add(98, 492)
        std.put(153, 542)
        tree.add(153, 542)
        std.put(838, 740)
        tree.add(838, 740)
        std.put(619, 125)
        tree.add(619, 125)
        std.put(840, 129)
        tree.add(840, 129)
        std.put(115, 766)
        tree.add(115, 766)
        std.put(803, 442)
        tree.add(803, 442)
        std.remove(257)
        tree.delete(257)
        std.remove(208)
        tree.delete(208)
        std.remove(66)
        tree.delete(66)
        std.remove(888)
        tree.delete(888)
        std.remove(347)
        tree.delete(347)
        std.remove(339)
        tree.delete(339)
        std.remove(494)
        tree.delete(494)
        std.remove(838)
        tree.delete(838)
        std.remove(844)
        tree.delete(844)
        std.remove(925)
        tree.delete(925)
        std.remove(381)
        tree.delete(381)
        std.remove(798)
        tree.delete(798)
        std.remove(451)
        tree.delete(451)
        std.remove(317)
        tree.delete(317)
        std.remove(278)
        tree.delete(278)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion4() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(500, 197)
        tree.add(500, 197)
        std.put(135, 329)
        tree.add(135, 329)
        std.put(454, 709)
        tree.add(454, 709)
        std.put(547, 203)
        tree.add(547, 203)
        std.put(882, 464)
        tree.add(882, 464)
        std.put(726, 338)
        tree.add(726, 338)
        std.put(346, 985)
        tree.add(346, 985)
        std.put(955, 771)
        tree.add(955, 771)
        std.put(598, 130)
        tree.add(598, 130)
        std.put(180, 55)
        tree.add(180, 55)
        std.put(350, 504)
        tree.add(350, 504)
        std.put(761, 553)
        tree.add(761, 553)
        std.put(514, 430)
        tree.add(514, 430)
        std.put(853, 424)
        tree.add(853, 424)
        std.put(360, 74)
        tree.add(360, 74)
        std.remove(765)
        tree.delete(765)
        std.remove(134)
        tree.delete(134)
        std.remove(204)
        tree.delete(204)
        std.remove(957)
        tree.delete(957)
        std.remove(460)
        tree.delete(460)
        std.remove(170)
        tree.delete(170)
        std.remove(220)
        tree.delete(220)
        std.remove(419)
        tree.delete(419)
        std.remove(395)
        tree.delete(395)
        std.remove(453)
        tree.delete(453)
        std.remove(140)
        tree.delete(140)
        std.remove(23)
        tree.delete(23)
        std.remove(735)
        tree.delete(735)
        std.remove(559)
        tree.delete(559)
        std.remove(585)
        tree.delete(585)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion5() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(706, 841)
        tree.add(706, 841)
        std.put(481, 768)
        tree.add(481, 768)
        std.put(443, 990)
        tree.add(443, 990)
        std.put(671, 914)
        tree.add(671, 914)
        std.put(19, 924)
        tree.add(19, 924)
        std.put(419, 876)
        tree.add(419, 876)
        std.put(204, 791)
        tree.add(204, 791)
        std.put(955, 890)
        tree.add(955, 890)
        std.put(899, 354)
        tree.add(899, 354)
        std.put(989, 367)
        tree.add(989, 367)
        std.put(197, 73)
        tree.add(197, 73)
        std.put(219, 819)
        tree.add(219, 819)
        std.put(25, 678)
        tree.add(25, 678)
        std.put(455, 675)
        tree.add(455, 675)
        std.put(226, 679)
        tree.add(226, 679)
        std.remove(807)
        tree.delete(807)
        std.remove(306)
        tree.delete(306)
        std.remove(636)
        tree.delete(636)
        std.remove(537)
        tree.delete(537)
        std.remove(914)
        tree.delete(914)
        std.remove(300)
        tree.delete(300)
        std.remove(812)
        tree.delete(812)
        std.remove(795)
        tree.delete(795)
        std.remove(96)
        tree.delete(96)
        std.remove(832)
        tree.delete(832)
        std.remove(55)
        tree.delete(55)
        std.remove(546)
        tree.delete(546)
        std.remove(372)
        tree.delete(372)
        std.remove(85)
        tree.delete(85)
        std.remove(619)
        tree.delete(619)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion6() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(208, 194)
        tree.add(208, 194)
        std.put(156, 417)
        tree.add(156, 417)
        std.put(300, 459)
        tree.add(300, 459)
        std.put(295, 886)
        tree.add(295, 886)
        std.put(252, 444)
        tree.add(252, 444)
        std.put(341, 280)
        tree.add(341, 280)
        std.put(363, 167)
        tree.add(363, 167)
        std.put(573, 612)
        tree.add(573, 612)
        std.put(842, 624)
        tree.add(842, 624)
        std.put(772, 497)
        tree.add(772, 497)
        std.put(224, 983)
        tree.add(224, 983)
        std.put(340, 62)
        tree.add(340, 62)
        std.put(982, 407)
        tree.add(982, 407)
        std.put(311, 546)
        tree.add(311, 546)
        std.put(353, 376)
        tree.add(353, 376)
        std.remove(224)
        tree.delete(224)
        std.remove(307)
        tree.delete(307)
        std.remove(703)
        tree.delete(703)
        std.remove(411)
        tree.delete(411)
        std.remove(867)
        tree.delete(867)
        std.remove(422)
        tree.delete(422)
        std.remove(452)
        tree.delete(452)
        std.remove(639)
        tree.delete(639)
        std.remove(467)
        tree.delete(467)
        std.remove(187)
        tree.delete(187)
        std.remove(572)
        tree.delete(572)
        std.remove(735)
        tree.delete(735)
        std.remove(368)
        tree.delete(368)
        std.remove(88)
        tree.delete(88)
        std.remove(3)
        tree.delete(3)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion7() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(563, 101)
        tree.add(563, 101)
        std.put(707, 221)
        tree.add(707, 221)
        std.put(739, 864)
        tree.add(739, 864)
        std.put(833, 980)
        tree.add(833, 980)
        std.put(161, 550)
        tree.add(161, 550)
        std.put(884, 345)
        tree.add(884, 345)
        std.put(961, 973)
        tree.add(961, 973)
        std.put(745, 679)
        tree.add(745, 679)
        std.put(510, 190)
        tree.add(510, 190)
        std.put(555, 245)
        tree.add(555, 245)
        std.put(862, 396)
        tree.add(862, 396)
        std.put(53, 724)
        tree.add(53, 724)
        std.put(398, 735)
        tree.add(398, 735)
        std.put(509, 657)
        tree.add(509, 657)
        std.put(48, 763)
        tree.add(48, 763)
        std.remove(76)
        tree.delete(76)
        std.remove(339)
        tree.delete(339)
        std.remove(412)
        tree.delete(412)
        std.remove(998)
        tree.delete(998)
        std.remove(119)
        tree.delete(119)
        std.remove(882)
        tree.delete(882)
        std.remove(614)
        tree.delete(614)
        std.remove(543)
        tree.delete(543)
        std.remove(883)
        tree.delete(883)
        std.remove(43)
        tree.delete(43)
        std.remove(776)
        tree.delete(776)
        std.remove(652)
        tree.delete(652)
        std.remove(29)
        tree.delete(29)
        std.remove(317)
        tree.delete(317)
        std.remove(742)
        tree.delete(742)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion8() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(767, 308)
        tree.add(767, 308)
        std.put(148, 186)
        tree.add(148, 186)
        std.put(143, 122)
        tree.add(143, 122)
        std.put(990, 334)
        tree.add(990, 334)
        std.put(361, 169)
        tree.add(361, 169)
        std.put(486, 253)
        tree.add(486, 253)
        std.put(960, 383)
        tree.add(960, 383)
        std.put(35, 438)
        tree.add(35, 438)
        std.put(124, 325)
        tree.add(124, 325)
        std.put(495, 826)
        tree.add(495, 826)
        std.put(332, 765)
        tree.add(332, 765)
        std.put(828, 478)
        tree.add(828, 478)
        std.put(707, 643)
        tree.add(707, 643)
        std.put(474, 650)
        tree.add(474, 650)
        std.put(350, 737)
        tree.add(350, 737)
        std.remove(693)
        tree.delete(693)
        std.remove(822)
        tree.delete(822)
        std.remove(536)
        tree.delete(536)
        std.remove(5)
        tree.delete(5)
        std.remove(166)
        tree.delete(166)
        std.remove(300)
        tree.delete(300)
        std.remove(457)
        tree.delete(457)
        std.remove(195)
        tree.delete(195)
        std.remove(775)
        tree.delete(775)
        std.remove(944)
        tree.delete(944)
        std.remove(333)
        tree.delete(333)
        std.remove(237)
        tree.delete(237)
        std.remove(658)
        tree.delete(658)
        std.remove(696)
        tree.delete(696)
        std.remove(916)
        tree.delete(916)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion9() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(648, 201)
        tree.add(648, 201)
        std.put(993, 461)
        tree.add(993, 461)
        std.put(593, 414)
        tree.add(593, 414)
        std.put(779, 136)
        tree.add(779, 136)
        std.put(432, 983)
        tree.add(432, 983)
        std.put(355, 52)
        tree.add(355, 52)
        std.put(11, 611)
        tree.add(11, 611)
        std.put(721, 635)
        tree.add(721, 635)
        std.put(554, 262)
        tree.add(554, 262)
        std.put(938, 568)
        tree.add(938, 568)
        std.put(452, 324)
        tree.add(452, 324)
        std.put(346, 531)
        tree.add(346, 531)
        std.put(982, 278)
        tree.add(982, 278)
        std.put(307, 380)
        tree.add(307, 380)
        std.put(600, 884)
        tree.add(600, 884)
        std.remove(188)
        tree.delete(188)
        std.remove(163)
        tree.delete(163)
        std.remove(810)
        tree.delete(810)
        std.remove(317)
        tree.delete(317)
        std.remove(151)
        tree.delete(151)
        std.remove(100)
        tree.delete(100)
        std.remove(842)
        tree.delete(842)
        std.remove(779)
        tree.delete(779)
        std.remove(400)
        tree.delete(400)
        std.remove(357)
        tree.delete(357)
        std.remove(940)
        tree.delete(940)
        std.remove(284)
        tree.delete(284)
        std.remove(859)
        tree.delete(859)
        std.remove(464)
        tree.delete(464)
        std.remove(326)
        tree.delete(326)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion10() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(303, 769)
        tree.add(303, 769)
        std.put(69, 462)
        tree.add(69, 462)
        std.put(305, 747)
        tree.add(305, 747)
        std.put(312, 16)
        tree.add(312, 16)
        std.put(469, 211)
        tree.add(469, 211)
        std.put(423, 335)
        tree.add(423, 335)
        std.put(531, 992)
        tree.add(531, 992)
        std.put(711, 124)
        tree.add(711, 124)
        std.put(885, 72)
        tree.add(885, 72)
        std.put(538, 343)
        tree.add(538, 343)
        std.put(280, 532)
        tree.add(280, 532)
        std.put(811, 7)
        tree.add(811, 7)
        std.put(804, 294)
        tree.add(804, 294)
        std.put(992, 364)
        tree.add(992, 364)
        std.put(300, 179)
        tree.add(300, 179)
        std.remove(688)
        tree.delete(688)
        std.remove(106)
        tree.delete(106)
        std.remove(909)
        tree.delete(909)
        std.remove(640)
        tree.delete(640)
        std.remove(592)
        tree.delete(592)
        std.remove(973)
        tree.delete(973)
        std.remove(636)
        tree.delete(636)
        std.remove(702)
        tree.delete(702)
        std.remove(56)
        tree.delete(56)
        std.remove(848)
        tree.delete(848)
        std.remove(961)
        tree.delete(961)
        std.remove(23)
        tree.delete(23)
        std.remove(25)
        tree.delete(25)
        std.remove(839)
        tree.delete(839)
        std.remove(16)
        tree.delete(16)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion11() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(509, 542)
        tree.add(509, 542)
        std.put(209, 754)
        tree.add(209, 754)
        std.put(816, 41)
        tree.add(816, 41)
        std.put(520, 944)
        tree.add(520, 944)
        std.put(750, 902)
        tree.add(750, 902)
        std.put(554, 263)
        tree.add(554, 263)
        std.put(899, 426)
        tree.add(899, 426)
        std.put(96, 942)
        tree.add(96, 942)
        std.put(192, 340)
        tree.add(192, 340)
        std.put(816, 934)
        tree.add(816, 934)
        std.put(658, 948)
        tree.add(658, 948)
        std.put(581, 365)
        tree.add(581, 365)
        std.put(711, 681)
        tree.add(711, 681)
        std.put(873, 456)
        tree.add(873, 456)
        std.put(574, 333)
        tree.add(574, 333)
        std.remove(168)
        tree.delete(168)
        std.remove(82)
        tree.delete(82)
        std.remove(431)
        tree.delete(431)
        std.remove(137)
        tree.delete(137)
        std.remove(344)
        tree.delete(344)
        std.remove(907)
        tree.delete(907)
        std.remove(574)
        tree.delete(574)
        std.remove(504)
        tree.delete(504)
        std.remove(921)
        tree.delete(921)
        std.remove(668)
        tree.delete(668)
        std.remove(594)
        tree.delete(594)
        std.remove(317)
        tree.delete(317)
        std.remove(902)
        tree.delete(902)
        std.remove(494)
        tree.delete(494)
        std.remove(787)
        tree.delete(787)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion12() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(674, 622)
        tree.add(674, 622)
        std.put(244, 115)
        tree.add(244, 115)
        std.put(765, 184)
        tree.add(765, 184)
        std.put(142, 298)
        tree.add(142, 298)
        std.put(18, 819)
        tree.add(18, 819)
        std.put(606, 14)
        tree.add(606, 14)
        std.put(853, 485)
        tree.add(853, 485)
        std.put(115, 140)
        tree.add(115, 140)
        std.put(207, 879)
        tree.add(207, 879)
        std.put(153, 437)
        tree.add(153, 437)
        std.put(702, 70)
        tree.add(702, 70)
        std.put(641, 389)
        tree.add(641, 389)
        std.put(588, 39)
        tree.add(588, 39)
        std.put(265, 325)
        tree.add(265, 325)
        std.put(291, 617)
        tree.add(291, 617)
        std.remove(11)
        tree.delete(11)
        std.remove(280)
        tree.delete(280)
        std.remove(593)
        tree.delete(593)
        std.remove(560)
        tree.delete(560)
        std.remove(762)
        tree.delete(762)
        std.remove(985)
        tree.delete(985)
        std.remove(659)
        tree.delete(659)
        std.remove(504)
        tree.delete(504)
        std.remove(240)
        tree.delete(240)
        std.remove(267)
        tree.delete(267)
        std.remove(617)
        tree.delete(617)
        std.remove(665)
        tree.delete(665)
        std.remove(542)
        tree.delete(542)
        std.remove(462)
        tree.delete(462)
        std.remove(583)
        tree.delete(583)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion13() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(551, 275)
        tree.add(551, 275)
        std.put(214, 465)
        tree.add(214, 465)
        std.put(414, 478)
        tree.add(414, 478)
        std.put(792, 879)
        tree.add(792, 879)
        std.put(529, 730)
        tree.add(529, 730)
        std.put(894, 373)
        tree.add(894, 373)
        std.put(185, 512)
        tree.add(185, 512)
        std.put(595, 374)
        tree.add(595, 374)
        std.put(936, 49)
        tree.add(936, 49)
        std.put(97, 871)
        tree.add(97, 871)
        std.put(654, 164)
        tree.add(654, 164)
        std.put(93, 568)
        tree.add(93, 568)
        std.put(619, 119)
        tree.add(619, 119)
        std.put(116, 48)
        tree.add(116, 48)
        std.put(444, 734)
        tree.add(444, 734)
        std.remove(976)
        tree.delete(976)
        std.remove(828)
        tree.delete(828)
        std.remove(527)
        tree.delete(527)
        std.remove(421)
        tree.delete(421)
        std.remove(999)
        tree.delete(999)
        std.remove(992)
        tree.delete(992)
        std.remove(662)
        tree.delete(662)
        std.remove(911)
        tree.delete(911)
        std.remove(828)
        tree.delete(828)
        std.remove(514)
        tree.delete(514)
        std.remove(155)
        tree.delete(155)
        std.remove(125)
        tree.delete(125)
        std.remove(609)
        tree.delete(609)
        std.remove(747)
        tree.delete(747)
        std.remove(143)
        tree.delete(143)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion14() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(745, 454)
        tree.add(745, 454)
        std.put(380, 872)
        tree.add(380, 872)
        std.put(962, 354)
        tree.add(962, 354)
        std.put(54, 938)
        tree.add(54, 938)
        std.put(84, 753)
        tree.add(84, 753)
        std.put(684, 363)
        tree.add(684, 363)
        std.put(160, 742)
        tree.add(160, 742)
        std.put(515, 570)
        tree.add(515, 570)
        std.put(700, 716)
        tree.add(700, 716)
        std.put(10, 330)
        tree.add(10, 330)
        std.put(555, 253)
        tree.add(555, 253)
        std.put(85, 228)
        tree.add(85, 228)
        std.put(107, 157)
        tree.add(107, 157)
        std.put(947, 663)
        tree.add(947, 663)
        std.put(8, 2)
        tree.add(8, 2)
        std.remove(997)
        tree.delete(997)
        std.remove(910)
        tree.delete(910)
        std.remove(839)
        tree.delete(839)
        std.remove(64)
        tree.delete(64)
        std.remove(218)
        tree.delete(218)
        std.remove(162)
        tree.delete(162)
        std.remove(51)
        tree.delete(51)
        std.remove(149)
        tree.delete(149)
        std.remove(305)
        tree.delete(305)
        std.remove(154)
        tree.delete(154)
        std.remove(418)
        tree.delete(418)
        std.remove(593)
        tree.delete(593)
        std.remove(304)
        tree.delete(304)
        std.remove(138)
        tree.delete(138)
        std.remove(684)
        tree.delete(684)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion15() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(651, 274)
        tree.add(651, 274)
        std.put(815, 607)
        tree.add(815, 607)
        std.put(495, 209)
        tree.add(495, 209)
        std.put(179, 660)
        tree.add(179, 660)
        std.put(31, 234)
        tree.add(31, 234)
        std.put(277, 161)
        tree.add(277, 161)
        std.put(1000, 173)
        tree.add(1000, 173)
        std.put(57, 492)
        tree.add(57, 492)
        std.put(130, 873)
        tree.add(130, 873)
        std.put(539, 213)
        tree.add(539, 213)
        std.put(879, 205)
        tree.add(879, 205)
        std.put(18, 198)
        tree.add(18, 198)
        std.put(96, 667)
        tree.add(96, 667)
        std.put(57, 587)
        tree.add(57, 587)
        std.put(534, 434)
        tree.add(534, 434)
        std.remove(736)
        tree.delete(736)
        std.remove(246)
        tree.delete(246)
        std.remove(887)
        tree.delete(887)
        std.remove(657)
        tree.delete(657)
        std.remove(942)
        tree.delete(942)
        std.remove(238)
        tree.delete(238)
        std.remove(203)
        tree.delete(203)
        std.remove(820)
        tree.delete(820)
        std.remove(582)
        tree.delete(582)
        std.remove(414)
        tree.delete(414)
        std.remove(349)
        tree.delete(349)
        std.remove(168)
        tree.delete(168)
        std.remove(319)
        tree.delete(319)
        std.remove(54)
        tree.delete(54)
        std.remove(287)
        tree.delete(287)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion16() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(35, 296)
        tree.add(35, 296)
        std.put(915, 992)
        tree.add(915, 992)
        std.put(687, 134)
        tree.add(687, 134)
        std.put(193, 265)
        tree.add(193, 265)
        std.put(930, 78)
        tree.add(930, 78)
        std.put(734, 56)
        tree.add(734, 56)
        std.put(304, 73)
        tree.add(304, 73)
        std.put(80, 26)
        tree.add(80, 26)
        std.put(311, 836)
        tree.add(311, 836)
        std.put(221, 170)
        tree.add(221, 170)
        std.put(576, 910)
        tree.add(576, 910)
        std.put(404, 128)
        tree.add(404, 128)
        std.put(512, 199)
        tree.add(512, 199)
        std.put(352, 429)
        tree.add(352, 429)
        std.put(549, 5)
        tree.add(549, 5)
        std.remove(454)
        tree.delete(454)
        std.remove(388)
        tree.delete(388)
        std.remove(387)
        tree.delete(387)
        std.remove(762)
        tree.delete(762)
        std.remove(5)
        tree.delete(5)
        std.remove(250)
        tree.delete(250)
        std.remove(800)
        tree.delete(800)
        std.remove(562)
        tree.delete(562)
        std.remove(883)
        tree.delete(883)
        std.remove(915)
        tree.delete(915)
        std.remove(243)
        tree.delete(243)
        std.remove(679)
        tree.delete(679)
        std.remove(928)
        tree.delete(928)
        std.remove(296)
        tree.delete(296)
        std.remove(182)
        tree.delete(182)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion17() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(6, 968)
        tree.add(6, 968)
        std.put(152, 136)
        tree.add(152, 136)
        std.put(283, 730)
        tree.add(283, 730)
        std.put(938, 887)
        tree.add(938, 887)
        std.put(960, 131)
        tree.add(960, 131)
        std.put(822, 149)
        tree.add(822, 149)
        std.put(983, 528)
        tree.add(983, 528)
        std.put(175, 614)
        tree.add(175, 614)
        std.put(400, 617)
        tree.add(400, 617)
        std.put(416, 830)
        tree.add(416, 830)
        std.put(648, 657)
        tree.add(648, 657)
        std.put(8, 493)
        tree.add(8, 493)
        std.put(712, 396)
        tree.add(712, 396)
        std.put(188, 29)
        tree.add(188, 29)
        std.put(607, 947)
        tree.add(607, 947)
        std.remove(401)
        tree.delete(401)
        std.remove(872)
        tree.delete(872)
        std.remove(3)
        tree.delete(3)
        std.remove(177)
        tree.delete(177)
        std.remove(861)
        tree.delete(861)
        std.remove(479)
        tree.delete(479)
        std.remove(948)
        tree.delete(948)
        std.remove(147)
        tree.delete(147)
        std.remove(920)
        tree.delete(920)
        std.remove(650)
        tree.delete(650)
        std.remove(231)
        tree.delete(231)
        std.remove(750)
        tree.delete(750)
        std.remove(618)
        tree.delete(618)
        std.remove(898)
        tree.delete(898)
        std.remove(629)
        tree.delete(629)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion18() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(301, 815)
        tree.add(301, 815)
        std.put(175, 211)
        tree.add(175, 211)
        std.put(557, 97)
        tree.add(557, 97)
        std.put(496, 184)
        tree.add(496, 184)
        std.put(16, 866)
        tree.add(16, 866)
        std.put(866, 567)
        tree.add(866, 567)
        std.put(396, 258)
        tree.add(396, 258)
        std.put(476, 680)
        tree.add(476, 680)
        std.put(752, 870)
        tree.add(752, 870)
        std.put(245, 321)
        tree.add(245, 321)
        std.put(818, 43)
        tree.add(818, 43)
        std.put(84, 320)
        tree.add(84, 320)
        std.put(988, 99)
        tree.add(988, 99)
        std.put(982, 342)
        tree.add(982, 342)
        std.put(481, 117)
        tree.add(481, 117)
        std.remove(872)
        tree.delete(872)
        std.remove(556)
        tree.delete(556)
        std.remove(572)
        tree.delete(572)
        std.remove(611)
        tree.delete(611)
        std.remove(456)
        tree.delete(456)
        std.remove(421)
        tree.delete(421)
        std.remove(846)
        tree.delete(846)
        std.remove(505)
        tree.delete(505)
        std.remove(285)
        tree.delete(285)
        std.remove(270)
        tree.delete(270)
        std.remove(502)
        tree.delete(502)
        std.remove(266)
        tree.delete(266)
        std.remove(619)
        tree.delete(619)
        std.remove(39)
        tree.delete(39)
        std.remove(956)
        tree.delete(956)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion19() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(954, 134)
        tree.add(954, 134)
        std.put(799, 373)
        tree.add(799, 373)
        std.put(602, 840)
        tree.add(602, 840)
        std.put(290, 523)
        tree.add(290, 523)
        std.put(849, 998)
        tree.add(849, 998)
        std.put(628, 743)
        tree.add(628, 743)
        std.put(552, 776)
        tree.add(552, 776)
        std.put(22, 760)
        tree.add(22, 760)
        std.put(410, 564)
        tree.add(410, 564)
        std.put(906, 307)
        tree.add(906, 307)
        std.put(261, 694)
        tree.add(261, 694)
        std.put(382, 235)
        tree.add(382, 235)
        std.put(378, 593)
        tree.add(378, 593)
        std.put(22, 528)
        tree.add(22, 528)
        std.put(170, 387)
        tree.add(170, 387)
        std.remove(127)
        tree.delete(127)
        std.remove(475)
        tree.delete(475)
        std.remove(419)
        tree.delete(419)
        std.remove(901)
        tree.delete(901)
        std.remove(843)
        tree.delete(843)
        std.remove(386)
        tree.delete(386)
        std.remove(265)
        tree.delete(265)
        std.remove(807)
        tree.delete(807)
        std.remove(774)
        tree.delete(774)
        std.remove(756)
        tree.delete(756)
        std.remove(828)
        tree.delete(828)
        std.remove(417)
        tree.delete(417)
        std.remove(512)
        tree.delete(512)
        std.remove(357)
        tree.delete(357)
        std.remove(506)
        tree.delete(506)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion20() {
        val tree: RedBlackTree<Int> = RedBlackTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(705, 979)
        tree.add(705, 979)
        std.put(888, 381)
        tree.add(888, 381)
        std.put(695, 199)
        tree.add(695, 199)
        std.put(731, 629)
        tree.add(731, 629)
        std.put(248, 897)
        tree.add(248, 897)
        std.put(197, 561)
        tree.add(197, 561)
        std.put(601, 442)
        tree.add(601, 442)
        std.put(287, 542)
        tree.add(287, 542)
        std.put(278, 649)
        tree.add(278, 649)
        std.put(749, 584)
        tree.add(749, 584)
        std.put(109, 153)
        tree.add(109, 153)
        std.put(826, 85)
        tree.add(826, 85)
        std.put(429, 271)
        tree.add(429, 271)
        std.put(140, 405)
        tree.add(140, 405)
        std.put(837, 661)
        tree.add(837, 661)
        std.remove(730)
        tree.delete(730)
        std.remove(639)
        tree.delete(639)
        std.remove(243)
        tree.delete(243)
        std.remove(272)
        tree.delete(272)
        std.remove(156)
        tree.delete(156)
        std.remove(629)
        tree.delete(629)
        std.remove(221)
        tree.delete(221)
        std.remove(93)
        tree.delete(93)
        std.remove(750)
        tree.delete(750)
        std.remove(31)
        tree.delete(31)
        std.remove(259)
        tree.delete(259)
        std.remove(476)
        tree.delete(476)
        std.remove(342)
        tree.delete(342)
        std.remove(789)
        tree.delete(789)
        std.remove(200)
        tree.delete(200)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
}