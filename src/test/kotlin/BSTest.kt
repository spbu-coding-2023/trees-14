import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import src.trees.binarySearchTree


class BSTest {
    @Test
    fun intInsertion1() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(179, 784)
        tree.add(179, 784)
        std.put(556, 697)
        tree.add(556, 697)
        std.put(108, 124)
        tree.add(108, 124)
        std.put(689, 961)
        tree.add(689, 961)
        std.put(729, 620)
        tree.add(729, 620)
        std.put(400, 66)
        tree.add(400, 66)
        std.put(596, 499)
        tree.add(596, 499)
        std.put(698, 606)
        tree.add(698, 606)
        std.put(223, 525)
        tree.add(223, 525)
        std.put(613, 645)
        tree.add(613, 645)
        std.put(659, 173)
        tree.add(659, 173)
        std.put(849, 718)
        tree.add(849, 718)
        std.put(922, 402)
        tree.add(922, 402)
        std.put(376, 513)
        tree.add(376, 513)
        std.put(595, 254)
        tree.add(595, 254)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion2() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(754, 798)
        tree.add(754, 798)
        std.put(371, 211)
        tree.add(371, 211)
        std.put(499, 114)
        tree.add(499, 114)
        std.put(484, 728)
        tree.add(484, 728)
        std.put(647, 481)
        tree.add(647, 481)
        std.put(819, 263)
        tree.add(819, 263)
        std.put(929, 15)
        tree.add(929, 15)
        std.put(988, 57)
        tree.add(988, 57)
        std.put(16, 878)
        tree.add(16, 878)
        std.put(351, 537)
        tree.add(351, 537)
        std.put(507, 41)
        tree.add(507, 41)
        std.put(185, 610)
        tree.add(185, 610)
        std.put(925, 857)
        tree.add(925, 857)
        std.put(187, 199)
        tree.add(187, 199)
        std.put(50, 265)
        tree.add(50, 265)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion3() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(61, 383)
        tree.add(61, 383)
        std.put(923, 320)
        tree.add(923, 320)
        std.put(686, 18)
        tree.add(686, 18)
        std.put(896, 136)
        tree.add(896, 136)
        std.put(312, 462)
        tree.add(312, 462)
        std.put(405, 761)
        tree.add(405, 761)
        std.put(297, 557)
        tree.add(297, 557)
        std.put(96, 760)
        tree.add(96, 760)
        std.put(851, 528)
        tree.add(851, 528)
        std.put(54, 643)
        tree.add(54, 643)
        std.put(838, 158)
        tree.add(838, 158)
        std.put(944, 852)
        tree.add(944, 852)
        std.put(696, 430)
        tree.add(696, 430)
        std.put(567, 65)
        tree.add(567, 65)
        std.put(627, 80)
        tree.add(627, 80)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion4() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(607, 690)
        tree.add(607, 690)
        std.put(728, 489)
        tree.add(728, 489)
        std.put(267, 9)
        tree.add(267, 9)
        std.put(378, 116)
        tree.add(378, 116)
        std.put(667, 759)
        tree.add(667, 759)
        std.put(27, 213)
        tree.add(27, 213)
        std.put(739, 23)
        tree.add(739, 23)
        std.put(177, 608)
        tree.add(177, 608)
        std.put(46, 717)
        tree.add(46, 717)
        std.put(773, 835)
        tree.add(773, 835)
        std.put(45, 80)
        tree.add(45, 80)
        std.put(898, 276)
        tree.add(898, 276)
        std.put(424, 763)
        tree.add(424, 763)
        std.put(153, 457)
        tree.add(153, 457)
        std.put(351, 802)
        tree.add(351, 802)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion5() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(536, 433)
        tree.add(536, 433)
        std.put(442, 347)
        tree.add(442, 347)
        std.put(480, 128)
        tree.add(480, 128)
        std.put(168, 18)
        tree.add(168, 18)
        std.put(71, 358)
        tree.add(71, 358)
        std.put(871, 12)
        tree.add(871, 12)
        std.put(558, 991)
        tree.add(558, 991)
        std.put(969, 625)
        tree.add(969, 625)
        std.put(263, 435)
        tree.add(263, 435)
        std.put(869, 516)
        tree.add(869, 516)
        std.put(430, 301)
        tree.add(430, 301)
        std.put(350, 267)
        tree.add(350, 267)
        std.put(940, 830)
        tree.add(940, 830)
        std.put(654, 106)
        tree.add(654, 106)
        std.put(675, 14)
        tree.add(675, 14)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion6() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(868, 464)
        tree.add(868, 464)
        std.put(692, 974)
        tree.add(692, 974)
        std.put(594, 125)
        tree.add(594, 125)
        std.put(175, 252)
        tree.add(175, 252)
        std.put(701, 514)
        tree.add(701, 514)
        std.put(199, 873)
        tree.add(199, 873)
        std.put(233, 314)
        tree.add(233, 314)
        std.put(535, 720)
        tree.add(535, 720)
        std.put(925, 635)
        tree.add(925, 635)
        std.put(556, 64)
        tree.add(556, 64)
        std.put(656, 451)
        tree.add(656, 451)
        std.put(977, 997)
        tree.add(977, 997)
        std.put(361, 88)
        tree.add(361, 88)
        std.put(717, 225)
        tree.add(717, 225)
        std.put(47, 553)
        tree.add(47, 553)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion7() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(756, 707)
        tree.add(756, 707)
        std.put(206, 122)
        tree.add(206, 122)
        std.put(887, 801)
        tree.add(887, 801)
        std.put(301, 161)
        tree.add(301, 161)
        std.put(263, 738)
        tree.add(263, 738)
        std.put(304, 859)
        tree.add(304, 859)
        std.put(515, 96)
        tree.add(515, 96)
        std.put(627, 98)
        tree.add(627, 98)
        std.put(857, 279)
        tree.add(857, 279)
        std.put(391, 9)
        tree.add(391, 9)
        std.put(791, 693)
        tree.add(791, 693)
        std.put(577, 374)
        tree.add(577, 374)
        std.put(460, 728)
        tree.add(460, 728)
        std.put(991, 705)
        tree.add(991, 705)
        std.put(942, 518)
        tree.add(942, 518)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion8() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(630, 852)
        tree.add(630, 852)
        std.put(947, 217)
        tree.add(947, 217)
        std.put(514, 494)
        tree.add(514, 494)
        std.put(677, 579)
        tree.add(677, 579)
        std.put(481, 40)
        tree.add(481, 40)
        std.put(152, 298)
        tree.add(152, 298)
        std.put(388, 372)
        tree.add(388, 372)
        std.put(885, 994)
        tree.add(885, 994)
        std.put(590, 305)
        tree.add(590, 305)
        std.put(70, 283)
        tree.add(70, 283)
        std.put(980, 41)
        tree.add(980, 41)
        std.put(717, 734)
        tree.add(717, 734)
        std.put(581, 148)
        tree.add(581, 148)
        std.put(582, 335)
        tree.add(582, 335)
        std.put(653, 104)
        tree.add(653, 104)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion9() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(595, 973)
        tree.add(595, 973)
        std.put(24, 311)
        tree.add(24, 311)
        std.put(536, 174)
        tree.add(536, 174)
        std.put(586, 747)
        tree.add(586, 747)
        std.put(380, 891)
        tree.add(380, 891)
        std.put(495, 480)
        tree.add(495, 480)
        std.put(809, 399)
        tree.add(809, 399)
        std.put(78, 477)
        tree.add(78, 477)
        std.put(203, 223)
        tree.add(203, 223)
        std.put(187, 616)
        tree.add(187, 616)
        std.put(111, 508)
        tree.add(111, 508)
        std.put(452, 83)
        tree.add(452, 83)
        std.put(140, 700)
        tree.add(140, 700)
        std.put(269, 318)
        tree.add(269, 318)
        std.put(21, 245)
        tree.add(21, 245)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intInsertion10() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(698, 938)
        tree.add(698, 938)
        std.put(179, 789)
        tree.add(179, 789)
        std.put(94, 665)
        tree.add(94, 665)
        std.put(344, 790)
        tree.add(344, 790)
        std.put(6, 466)
        tree.add(6, 466)
        std.put(487, 473)
        tree.add(487, 473)
        std.put(645, 617)
        tree.add(645, 617)
        std.put(394, 757)
        tree.add(394, 757)
        std.put(130, 161)
        tree.add(130, 161)
        std.put(463, 958)
        tree.add(463, 958)
        std.put(698, 51)
        tree.add(698, 51)
        std.put(725, 184)
        tree.add(725, 184)
        std.put(205, 232)
        tree.add(205, 232)
        std.put(890, 216)
        tree.add(890, 216)
        std.put(568, 305)
        tree.add(568, 305)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion1() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(707, 754)
        tree.add(707, 754)
        std.put(764, 825)
        tree.add(764, 825)
        std.put(59, 895)
        tree.add(59, 895)
        std.put(914, 851)
        tree.add(914, 851)
        std.put(835, 529)
        tree.add(835, 529)
        std.put(655, 70)
        tree.add(655, 70)
        std.put(116, 363)
        tree.add(116, 363)
        std.put(11, 153)
        tree.add(11, 153)
        std.put(492, 31)
        tree.add(492, 31)
        std.put(156, 960)
        tree.add(156, 960)
        std.put(590, 781)
        tree.add(590, 781)
        std.put(62, 739)
        tree.add(62, 739)
        std.put(353, 942)
        tree.add(353, 942)
        std.put(892, 211)
        tree.add(892, 211)
        std.put(364, 628)
        tree.add(364, 628)
        std.remove(984)
        tree.delete(984)
        std.remove(735)
        tree.delete(735)
        std.remove(978)
        tree.delete(978)
        std.remove(554)
        tree.delete(554)
        std.remove(699)
        tree.delete(699)
        std.remove(469)
        tree.delete(469)
        std.remove(767)
        tree.delete(767)
        std.remove(191)
        tree.delete(191)
        std.remove(884)
        tree.delete(884)
        std.remove(436)
        tree.delete(436)
        std.remove(588)
        tree.delete(588)
        std.remove(355)
        tree.delete(355)
        std.remove(613)
        tree.delete(613)
        std.remove(149)
        tree.delete(149)
        std.remove(465)
        tree.delete(465)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion2() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(30, 551)
        tree.add(30, 551)
        std.put(708, 96)
        tree.add(708, 96)
        std.put(852, 413)
        tree.add(852, 413)
        std.put(999, 190)
        tree.add(999, 190)
        std.put(523, 639)
        tree.add(523, 639)
        std.put(574, 80)
        tree.add(574, 80)
        std.put(694, 720)
        tree.add(694, 720)
        std.put(972, 146)
        tree.add(972, 146)
        std.put(317, 150)
        tree.add(317, 150)
        std.put(923, 370)
        tree.add(923, 370)
        std.put(812, 572)
        tree.add(812, 572)
        std.put(509, 940)
        tree.add(509, 940)
        std.put(419, 114)
        tree.add(419, 114)
        std.put(85, 390)
        tree.add(85, 390)
        std.put(790, 805)
        tree.add(790, 805)
        std.remove(536)
        tree.delete(536)
        std.remove(549)
        tree.delete(549)
        std.remove(447)
        tree.delete(447)
        std.remove(878)
        tree.delete(878)
        std.remove(865)
        tree.delete(865)
        std.remove(902)
        tree.delete(902)
        std.remove(721)
        tree.delete(721)
        std.remove(918)
        tree.delete(918)
        std.remove(299)
        tree.delete(299)
        std.remove(302)
        tree.delete(302)
        std.remove(763)
        tree.delete(763)
        std.remove(462)
        tree.delete(462)
        std.remove(134)
        tree.delete(134)
        std.remove(328)
        tree.delete(328)
        std.remove(32)
        tree.delete(32)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion3() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(562, 196)
        tree.add(562, 196)
        std.put(41, 130)
        tree.add(41, 130)
        std.put(222, 484)
        tree.add(222, 484)
        std.put(82, 802)
        tree.add(82, 802)
        std.put(733, 702)
        tree.add(733, 702)
        std.put(819, 50)
        tree.add(819, 50)
        std.put(241, 422)
        tree.add(241, 422)
        std.put(824, 247)
        tree.add(824, 247)
        std.put(591, 482)
        tree.add(591, 482)
        std.put(914, 69)
        tree.add(914, 69)
        std.put(627, 338)
        tree.add(627, 338)
        std.put(219, 373)
        tree.add(219, 373)
        std.put(931, 956)
        tree.add(931, 956)
        std.put(271, 575)
        tree.add(271, 575)
        std.put(274, 173)
        tree.add(274, 173)
        std.remove(943)
        tree.delete(943)
        std.remove(852)
        tree.delete(852)
        std.remove(897)
        tree.delete(897)
        std.remove(242)
        tree.delete(242)
        std.remove(263)
        tree.delete(263)
        std.remove(610)
        tree.delete(610)
        std.remove(825)
        tree.delete(825)
        std.remove(791)
        tree.delete(791)
        std.remove(950)
        tree.delete(950)
        std.remove(766)
        tree.delete(766)
        std.remove(17)
        tree.delete(17)
        std.remove(690)
        tree.delete(690)
        std.remove(741)
        tree.delete(741)
        std.remove(878)
        tree.delete(878)
        std.remove(194)
        tree.delete(194)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion4() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(908, 390)
        tree.add(908, 390)
        std.put(497, 206)
        tree.add(497, 206)
        std.put(259, 170)
        tree.add(259, 170)
        std.put(152, 58)
        tree.add(152, 58)
        std.put(355, 386)
        tree.add(355, 386)
        std.put(135, 90)
        tree.add(135, 90)
        std.put(412, 472)
        tree.add(412, 472)
        std.put(251, 783)
        tree.add(251, 783)
        std.put(641, 704)
        tree.add(641, 704)
        std.put(477, 191)
        tree.add(477, 191)
        std.put(709, 710)
        tree.add(709, 710)
        std.put(237, 818)
        tree.add(237, 818)
        std.put(285, 441)
        tree.add(285, 441)
        std.put(559, 963)
        tree.add(559, 963)
        std.put(314, 622)
        tree.add(314, 622)
        std.remove(807)
        tree.delete(807)
        std.remove(974)
        tree.delete(974)
        std.remove(10)
        tree.delete(10)
        std.remove(237)
        tree.delete(237)
        std.remove(740)
        tree.delete(740)
        std.remove(130)
        tree.delete(130)
        std.remove(630)
        tree.delete(630)
        std.remove(138)
        tree.delete(138)
        std.remove(575)
        tree.delete(575)
        std.remove(532)
        tree.delete(532)
        std.remove(857)
        tree.delete(857)
        std.remove(321)
        tree.delete(321)
        std.remove(246)
        tree.delete(246)
        std.remove(219)
        tree.delete(219)
        std.remove(925)
        tree.delete(925)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion5() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(12, 696)
        tree.add(12, 696)
        std.put(29, 430)
        tree.add(29, 430)
        std.put(869, 271)
        tree.add(869, 271)
        std.put(499, 374)
        tree.add(499, 374)
        std.put(472, 595)
        tree.add(472, 595)
        std.put(495, 504)
        tree.add(495, 504)
        std.put(769, 505)
        tree.add(769, 505)
        std.put(622, 627)
        tree.add(622, 627)
        std.put(4, 38)
        tree.add(4, 38)
        std.put(106, 56)
        tree.add(106, 56)
        std.put(252, 297)
        tree.add(252, 297)
        std.put(566, 817)
        tree.add(566, 817)
        std.put(72, 540)
        tree.add(72, 540)
        std.put(55, 52)
        tree.add(55, 52)
        std.put(365, 81)
        tree.add(365, 81)
        std.remove(709)
        tree.delete(709)
        std.remove(939)
        tree.delete(939)
        std.remove(626)
        tree.delete(626)
        std.remove(473)
        tree.delete(473)
        std.remove(127)
        tree.delete(127)
        std.remove(741)
        tree.delete(741)
        std.remove(135)
        tree.delete(135)
        std.remove(146)
        tree.delete(146)
        std.remove(213)
        tree.delete(213)
        std.remove(136)
        tree.delete(136)
        std.remove(42)
        tree.delete(42)
        std.remove(517)
        tree.delete(517)
        std.remove(421)
        tree.delete(421)
        std.remove(840)
        tree.delete(840)
        std.remove(862)
        tree.delete(862)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion6() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(690, 424)
        tree.add(690, 424)
        std.put(564, 404)
        tree.add(564, 404)
        std.put(584, 461)
        tree.add(584, 461)
        std.put(45, 933)
        tree.add(45, 933)
        std.put(211, 589)
        tree.add(211, 589)
        std.put(934, 912)
        tree.add(934, 912)
        std.put(50, 590)
        tree.add(50, 590)
        std.put(652, 34)
        tree.add(652, 34)
        std.put(0, 730)
        tree.add(0, 730)
        std.put(102, 32)
        tree.add(102, 32)
        std.put(182, 442)
        tree.add(182, 442)
        std.put(968, 131)
        tree.add(968, 131)
        std.put(51, 58)
        tree.add(51, 58)
        std.put(670, 548)
        tree.add(670, 548)
        std.put(133, 905)
        tree.add(133, 905)
        std.remove(16)
        tree.delete(16)
        std.remove(430)
        tree.delete(430)
        std.remove(43)
        tree.delete(43)
        std.remove(803)
        tree.delete(803)
        std.remove(910)
        tree.delete(910)
        std.remove(11)
        tree.delete(11)
        std.remove(523)
        tree.delete(523)
        std.remove(189)
        tree.delete(189)
        std.remove(871)
        tree.delete(871)
        std.remove(478)
        tree.delete(478)
        std.remove(226)
        tree.delete(226)
        std.remove(503)
        tree.delete(503)
        std.remove(930)
        tree.delete(930)
        std.remove(522)
        tree.delete(522)
        std.remove(959)
        tree.delete(959)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion7() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(357, 795)
        tree.add(357, 795)
        std.put(472, 487)
        tree.add(472, 487)
        std.put(828, 999)
        tree.add(828, 999)
        std.put(749, 952)
        tree.add(749, 952)
        std.put(914, 158)
        tree.add(914, 158)
        std.put(978, 156)
        tree.add(978, 156)
        std.put(701, 490)
        tree.add(701, 490)
        std.put(820, 686)
        tree.add(820, 686)
        std.put(490, 351)
        tree.add(490, 351)
        std.put(131, 427)
        tree.add(131, 427)
        std.put(811, 840)
        tree.add(811, 840)
        std.put(633, 344)
        tree.add(633, 344)
        std.put(883, 915)
        tree.add(883, 915)
        std.put(26, 12)
        tree.add(26, 12)
        std.put(956, 68)
        tree.add(956, 68)
        std.remove(202)
        tree.delete(202)
        std.remove(75)
        tree.delete(75)
        std.remove(228)
        tree.delete(228)
        std.remove(951)
        tree.delete(951)
        std.remove(12)
        tree.delete(12)
        std.remove(757)
        tree.delete(757)
        std.remove(147)
        tree.delete(147)
        std.remove(279)
        tree.delete(279)
        std.remove(986)
        tree.delete(986)
        std.remove(313)
        tree.delete(313)
        std.remove(445)
        tree.delete(445)
        std.remove(937)
        tree.delete(937)
        std.remove(670)
        tree.delete(670)
        std.remove(151)
        tree.delete(151)
        std.remove(96)
        tree.delete(96)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion8() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(331, 977)
        tree.add(331, 977)
        std.put(134, 202)
        tree.add(134, 202)
        std.put(659, 473)
        tree.add(659, 473)
        std.put(454, 843)
        tree.add(454, 843)
        std.put(453, 14)
        tree.add(453, 14)
        std.put(218, 339)
        tree.add(218, 339)
        std.put(361, 214)
        tree.add(361, 214)
        std.put(827, 93)
        tree.add(827, 93)
        std.put(658, 401)
        tree.add(658, 401)
        std.put(91, 534)
        tree.add(91, 534)
        std.put(597, 87)
        tree.add(597, 87)
        std.put(575, 577)
        tree.add(575, 577)
        std.put(54, 141)
        tree.add(54, 141)
        std.put(331, 621)
        tree.add(331, 621)
        std.put(492, 11)
        tree.add(492, 11)
        std.remove(597)
        tree.delete(597)
        std.remove(387)
        tree.delete(387)
        std.remove(545)
        tree.delete(545)
        std.remove(669)
        tree.delete(669)
        std.remove(943)
        tree.delete(943)
        std.remove(675)
        tree.delete(675)
        std.remove(812)
        tree.delete(812)
        std.remove(937)
        tree.delete(937)
        std.remove(195)
        tree.delete(195)
        std.remove(462)
        tree.delete(462)
        std.remove(755)
        tree.delete(755)
        std.remove(889)
        tree.delete(889)
        std.remove(620)
        tree.delete(620)
        std.remove(248)
        tree.delete(248)
        std.remove(139)
        tree.delete(139)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion9() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(875, 329)
        tree.add(875, 329)
        std.put(885, 358)
        tree.add(885, 358)
        std.put(55, 363)
        tree.add(55, 363)
        std.put(155, 895)
        tree.add(155, 895)
        std.put(770, 217)
        tree.add(770, 217)
        std.put(919, 808)
        tree.add(919, 808)
        std.put(772, 838)
        tree.add(772, 838)
        std.put(207, 614)
        tree.add(207, 614)
        std.put(755, 26)
        tree.add(755, 26)
        std.put(354, 84)
        tree.add(354, 84)
        std.put(689, 675)
        tree.add(689, 675)
        std.put(592, 647)
        tree.add(592, 647)
        std.put(986, 838)
        tree.add(986, 838)
        std.put(845, 305)
        tree.add(845, 305)
        std.put(207, 264)
        tree.add(207, 264)
        std.remove(644)
        tree.delete(644)
        std.remove(644)
        tree.delete(644)
        std.remove(421)
        tree.delete(421)
        std.remove(791)
        tree.delete(791)
        std.remove(77)
        tree.delete(77)
        std.remove(814)
        tree.delete(814)
        std.remove(586)
        tree.delete(586)
        std.remove(561)
        tree.delete(561)
        std.remove(896)
        tree.delete(896)
        std.remove(604)
        tree.delete(604)
        std.remove(389)
        tree.delete(389)
        std.remove(516)
        tree.delete(516)
        std.remove(636)
        tree.delete(636)
        std.remove(555)
        tree.delete(555)
        std.remove(369)
        tree.delete(369)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion10() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(519, 95)
        tree.add(519, 95)
        std.put(357, 776)
        tree.add(357, 776)
        std.put(186, 856)
        tree.add(186, 856)
        std.put(773, 903)
        tree.add(773, 903)
        std.put(667, 108)
        tree.add(667, 108)
        std.put(564, 180)
        tree.add(564, 180)
        std.put(771, 246)
        tree.add(771, 246)
        std.put(868, 254)
        tree.add(868, 254)
        std.put(618, 309)
        tree.add(618, 309)
        std.put(614, 153)
        tree.add(614, 153)
        std.put(824, 994)
        tree.add(824, 994)
        std.put(120, 562)
        tree.add(120, 562)
        std.put(736, 152)
        tree.add(736, 152)
        std.put(544, 617)
        tree.add(544, 617)
        std.put(242, 155)
        tree.add(242, 155)
        std.remove(168)
        tree.delete(168)
        std.remove(824)
        tree.delete(824)
        std.remove(781)
        tree.delete(781)
        std.remove(24)
        tree.delete(24)
        std.remove(674)
        tree.delete(674)
        std.remove(30)
        tree.delete(30)
        std.remove(556)
        tree.delete(556)
        std.remove(803)
        tree.delete(803)
        std.remove(351)
        tree.delete(351)
        std.remove(439)
        tree.delete(439)
        std.remove(667)
        tree.delete(667)
        std.remove(869)
        tree.delete(869)
        std.remove(763)
        tree.delete(763)
        std.remove(671)
        tree.delete(671)
        std.remove(337)
        tree.delete(337)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion11() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(434, 455)
        tree.add(434, 455)
        std.put(985, 850)
        tree.add(985, 850)
        std.put(87, 341)
        tree.add(87, 341)
        std.put(543, 393)
        tree.add(543, 393)
        std.put(300, 842)
        tree.add(300, 842)
        std.put(955, 120)
        tree.add(955, 120)
        std.put(592, 829)
        tree.add(592, 829)
        std.put(970, 213)
        tree.add(970, 213)
        std.put(722, 153)
        tree.add(722, 153)
        std.put(580, 167)
        tree.add(580, 167)
        std.put(46, 903)
        tree.add(46, 903)
        std.put(820, 519)
        tree.add(820, 519)
        std.put(194, 885)
        tree.add(194, 885)
        std.put(190, 337)
        tree.add(190, 337)
        std.put(182, 860)
        tree.add(182, 860)
        std.remove(732)
        tree.delete(732)
        std.remove(12)
        tree.delete(12)
        std.remove(246)
        tree.delete(246)
        std.remove(11)
        tree.delete(11)
        std.remove(857)
        tree.delete(857)
        std.remove(407)
        tree.delete(407)
        std.remove(196)
        tree.delete(196)
        std.remove(695)
        tree.delete(695)
        std.remove(644)
        tree.delete(644)
        std.remove(811)
        tree.delete(811)
        std.remove(488)
        tree.delete(488)
        std.remove(481)
        tree.delete(481)
        std.remove(600)
        tree.delete(600)
        std.remove(371)
        tree.delete(371)
        std.remove(682)
        tree.delete(682)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion12() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(311, 360)
        tree.add(311, 360)
        std.put(808, 42)
        tree.add(808, 42)
        std.put(67, 268)
        tree.add(67, 268)
        std.put(677, 360)
        tree.add(677, 360)
        std.put(616, 893)
        tree.add(616, 893)
        std.put(878, 844)
        tree.add(878, 844)
        std.put(909, 753)
        tree.add(909, 753)
        std.put(628, 799)
        tree.add(628, 799)
        std.put(799, 558)
        tree.add(799, 558)
        std.put(193, 859)
        tree.add(193, 859)
        std.put(690, 634)
        tree.add(690, 634)
        std.put(791, 432)
        tree.add(791, 432)
        std.put(224, 618)
        tree.add(224, 618)
        std.put(341, 974)
        tree.add(341, 974)
        std.put(400, 456)
        tree.add(400, 456)
        std.remove(74)
        tree.delete(74)
        std.remove(119)
        tree.delete(119)
        std.remove(194)
        tree.delete(194)
        std.remove(579)
        tree.delete(579)
        std.remove(212)
        tree.delete(212)
        std.remove(527)
        tree.delete(527)
        std.remove(264)
        tree.delete(264)
        std.remove(533)
        tree.delete(533)
        std.remove(776)
        tree.delete(776)
        std.remove(660)
        tree.delete(660)
        std.remove(325)
        tree.delete(325)
        std.remove(822)
        tree.delete(822)
        std.remove(902)
        tree.delete(902)
        std.remove(959)
        tree.delete(959)
        std.remove(276)
        tree.delete(276)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion13() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(433, 195)
        tree.add(433, 195)
        std.put(440, 323)
        tree.add(440, 323)
        std.put(912, 613)
        tree.add(912, 613)
        std.put(778, 115)
        tree.add(778, 115)
        std.put(850, 212)
        tree.add(850, 212)
        std.put(644, 261)
        tree.add(644, 261)
        std.put(273, 250)
        tree.add(273, 250)
        std.put(281, 429)
        tree.add(281, 429)
        std.put(863, 548)
        tree.add(863, 548)
        std.put(103, 603)
        tree.add(103, 603)
        std.put(211, 188)
        tree.add(211, 188)
        std.put(322, 507)
        tree.add(322, 507)
        std.put(362, 851)
        tree.add(362, 851)
        std.put(689, 754)
        tree.add(689, 754)
        std.put(960, 466)
        tree.add(960, 466)
        std.remove(451)
        tree.delete(451)
        std.remove(633)
        tree.delete(633)
        std.remove(317)
        tree.delete(317)
        std.remove(444)
        tree.delete(444)
        std.remove(252)
        tree.delete(252)
        std.remove(531)
        tree.delete(531)
        std.remove(483)
        tree.delete(483)
        std.remove(963)
        tree.delete(963)
        std.remove(498)
        tree.delete(498)
        std.remove(430)
        tree.delete(430)
        std.remove(874)
        tree.delete(874)
        std.remove(610)
        tree.delete(610)
        std.remove(424)
        tree.delete(424)
        std.remove(311)
        tree.delete(311)
        std.remove(695)
        tree.delete(695)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion14() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(936, 274)
        tree.add(936, 274)
        std.put(581, 584)
        tree.add(581, 584)
        std.put(868, 600)
        tree.add(868, 600)
        std.put(475, 590)
        tree.add(475, 590)
        std.put(915, 649)
        tree.add(915, 649)
        std.put(402, 770)
        tree.add(402, 770)
        std.put(981, 378)
        tree.add(981, 378)
        std.put(176, 419)
        tree.add(176, 419)
        std.put(614, 950)
        tree.add(614, 950)
        std.put(647, 154)
        tree.add(647, 154)
        std.put(836, 619)
        tree.add(836, 619)
        std.put(742, 63)
        tree.add(742, 63)
        std.put(875, 632)
        tree.add(875, 632)
        std.put(899, 686)
        tree.add(899, 686)
        std.put(74, 344)
        tree.add(74, 344)
        std.remove(997)
        tree.delete(997)
        std.remove(263)
        tree.delete(263)
        std.remove(484)
        tree.delete(484)
        std.remove(894)
        tree.delete(894)
        std.remove(349)
        tree.delete(349)
        std.remove(811)
        tree.delete(811)
        std.remove(435)
        tree.delete(435)
        std.remove(83)
        tree.delete(83)
        std.remove(94)
        tree.delete(94)
        std.remove(476)
        tree.delete(476)
        std.remove(663)
        tree.delete(663)
        std.remove(711)
        tree.delete(711)
        std.remove(33)
        tree.delete(33)
        std.remove(202)
        tree.delete(202)
        std.remove(788)
        tree.delete(788)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion15() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(53, 536)
        tree.add(53, 536)
        std.put(1000, 746)
        tree.add(1000, 746)
        std.put(303, 968)
        tree.add(303, 968)
        std.put(973, 999)
        tree.add(973, 999)
        std.put(571, 489)
        tree.add(571, 489)
        std.put(411, 819)
        tree.add(411, 819)
        std.put(637, 143)
        tree.add(637, 143)
        std.put(853, 357)
        tree.add(853, 357)
        std.put(114, 454)
        tree.add(114, 454)
        std.put(77, 635)
        tree.add(77, 635)
        std.put(700, 801)
        tree.add(700, 801)
        std.put(845, 46)
        tree.add(845, 46)
        std.put(732, 101)
        tree.add(732, 101)
        std.put(326, 234)
        tree.add(326, 234)
        std.put(814, 576)
        tree.add(814, 576)
        std.remove(498)
        tree.delete(498)
        std.remove(365)
        tree.delete(365)
        std.remove(543)
        tree.delete(543)
        std.remove(781)
        tree.delete(781)
        std.remove(763)
        tree.delete(763)
        std.remove(849)
        tree.delete(849)
        std.remove(74)
        tree.delete(74)
        std.remove(97)
        tree.delete(97)
        std.remove(166)
        tree.delete(166)
        std.remove(748)
        tree.delete(748)
        std.remove(220)
        tree.delete(220)
        std.remove(899)
        tree.delete(899)
        std.remove(308)
        tree.delete(308)
        std.remove(786)
        tree.delete(786)
        std.remove(893)
        tree.delete(893)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion16() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(416, 785)
        tree.add(416, 785)
        std.put(685, 729)
        tree.add(685, 729)
        std.put(72, 252)
        tree.add(72, 252)
        std.put(255, 199)
        tree.add(255, 199)
        std.put(466, 333)
        tree.add(466, 333)
        std.put(983, 276)
        tree.add(983, 276)
        std.put(109, 138)
        tree.add(109, 138)
        std.put(213, 119)
        tree.add(213, 119)
        std.put(859, 651)
        tree.add(859, 651)
        std.put(820, 185)
        tree.add(820, 185)
        std.put(741, 95)
        tree.add(741, 95)
        std.put(806, 944)
        tree.add(806, 944)
        std.put(709, 744)
        tree.add(709, 744)
        std.put(250, 655)
        tree.add(250, 655)
        std.put(855, 644)
        tree.add(855, 644)
        std.remove(398)
        tree.delete(398)
        std.remove(969)
        tree.delete(969)
        std.remove(655)
        tree.delete(655)
        std.remove(347)
        tree.delete(347)
        std.remove(573)
        tree.delete(573)
        std.remove(234)
        tree.delete(234)
        std.remove(697)
        tree.delete(697)
        std.remove(847)
        tree.delete(847)
        std.remove(202)
        tree.delete(202)
        std.remove(356)
        tree.delete(356)
        std.remove(25)
        tree.delete(25)
        std.remove(756)
        tree.delete(756)
        std.remove(38)
        tree.delete(38)
        std.remove(600)
        tree.delete(600)
        std.remove(796)
        tree.delete(796)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion17() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(884, 666)
        tree.add(884, 666)
        std.put(946, 14)
        tree.add(946, 14)
        std.put(706, 268)
        tree.add(706, 268)
        std.put(862, 913)
        tree.add(862, 913)
        std.put(696, 220)
        tree.add(696, 220)
        std.put(739, 662)
        tree.add(739, 662)
        std.put(773, 744)
        tree.add(773, 744)
        std.put(385, 640)
        tree.add(385, 640)
        std.put(539, 546)
        tree.add(539, 546)
        std.put(339, 996)
        tree.add(339, 996)
        std.put(929, 519)
        tree.add(929, 519)
        std.put(284, 575)
        tree.add(284, 575)
        std.put(674, 190)
        tree.add(674, 190)
        std.put(719, 825)
        tree.add(719, 825)
        std.put(433, 998)
        tree.add(433, 998)
        std.remove(401)
        tree.delete(401)
        std.remove(471)
        tree.delete(471)
        std.remove(207)
        tree.delete(207)
        std.remove(486)
        tree.delete(486)
        std.remove(727)
        tree.delete(727)
        std.remove(778)
        tree.delete(778)
        std.remove(561)
        tree.delete(561)
        std.remove(528)
        tree.delete(528)
        std.remove(856)
        tree.delete(856)
        std.remove(836)
        tree.delete(836)
        std.remove(914)
        tree.delete(914)
        std.remove(70)
        tree.delete(70)
        std.remove(16)
        tree.delete(16)
        std.remove(120)
        tree.delete(120)
        std.remove(934)
        tree.delete(934)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion18() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(499, 527)
        tree.add(499, 527)
        std.put(180, 906)
        tree.add(180, 906)
        std.put(550, 909)
        tree.add(550, 909)
        std.put(879, 107)
        tree.add(879, 107)
        std.put(306, 433)
        tree.add(306, 433)
        std.put(391, 634)
        tree.add(391, 634)
        std.put(748, 889)
        tree.add(748, 889)
        std.put(211, 103)
        tree.add(211, 103)
        std.put(284, 543)
        tree.add(284, 543)
        std.put(931, 9)
        tree.add(931, 9)
        std.put(73, 657)
        tree.add(73, 657)
        std.put(336, 132)
        tree.add(336, 132)
        std.put(362, 936)
        tree.add(362, 936)
        std.put(929, 803)
        tree.add(929, 803)
        std.put(708, 908)
        tree.add(708, 908)
        std.remove(779)
        tree.delete(779)
        std.remove(303)
        tree.delete(303)
        std.remove(277)
        tree.delete(277)
        std.remove(867)
        tree.delete(867)
        std.remove(479)
        tree.delete(479)
        std.remove(397)
        tree.delete(397)
        std.remove(955)
        tree.delete(955)
        std.remove(688)
        tree.delete(688)
        std.remove(663)
        tree.delete(663)
        std.remove(72)
        tree.delete(72)
        std.remove(331)
        tree.delete(331)
        std.remove(813)
        tree.delete(813)
        std.remove(790)
        tree.delete(790)
        std.remove(925)
        tree.delete(925)
        std.remove(885)
        tree.delete(885)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion19() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(621, 257)
        tree.add(621, 257)
        std.put(254, 296)
        tree.add(254, 296)
        std.put(793, 66)
        tree.add(793, 66)
        std.put(90, 933)
        tree.add(90, 933)
        std.put(777, 501)
        tree.add(777, 501)
        std.put(879, 500)
        tree.add(879, 500)
        std.put(531, 807)
        tree.add(531, 807)
        std.put(702, 901)
        tree.add(702, 901)
        std.put(757, 918)
        tree.add(757, 918)
        std.put(292, 564)
        tree.add(292, 564)
        std.put(315, 478)
        tree.add(315, 478)
        std.put(28, 4)
        tree.add(28, 4)
        std.put(766, 473)
        tree.add(766, 473)
        std.put(749, 448)
        tree.add(749, 448)
        std.put(382, 669)
        tree.add(382, 669)
        std.remove(257)
        tree.delete(257)
        std.remove(541)
        tree.delete(541)
        std.remove(158)
        tree.delete(158)
        std.remove(272)
        tree.delete(272)
        std.remove(945)
        tree.delete(945)
        std.remove(705)
        tree.delete(705)
        std.remove(142)
        tree.delete(142)
        std.remove(298)
        tree.delete(298)
        std.remove(906)
        tree.delete(906)
        std.remove(672)
        tree.delete(672)
        std.remove(961)
        tree.delete(961)
        std.remove(280)
        tree.delete(280)
        std.remove(480)
        tree.delete(480)
        std.remove(863)
        tree.delete(863)
        std.remove(191)
        tree.delete(191)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
    @Test
    fun intDeletion20() {
        val tree: binarySearchTree<Int> = binarySearchTree<Int>()
        val std: MutableMap<Int, Any> = mutableMapOf()
        std.put(283, 478)
        tree.add(283, 478)
        std.put(542, 610)
        tree.add(542, 610)
        std.put(1, 289)
        tree.add(1, 289)
        std.put(324, 170)
        tree.add(324, 170)
        std.put(257, 865)
        tree.add(257, 865)
        std.put(134, 49)
        tree.add(134, 49)
        std.put(445, 56)
        tree.add(445, 56)
        std.put(339, 760)
        tree.add(339, 760)
        std.put(745, 191)
        tree.add(745, 191)
        std.put(622, 244)
        tree.add(622, 244)
        std.put(191, 284)
        tree.add(191, 284)
        std.put(418, 192)
        tree.add(418, 192)
        std.put(590, 152)
        tree.add(590, 152)
        std.put(730, 294)
        tree.add(730, 294)
        std.put(695, 585)
        tree.add(695, 585)
        std.remove(714)
        tree.delete(714)
        std.remove(854)
        tree.delete(854)
        std.remove(84)
        tree.delete(84)
        std.remove(797)
        tree.delete(797)
        std.remove(281)
        tree.delete(281)
        std.remove(690)
        tree.delete(690)
        std.remove(639)
        tree.delete(639)
        std.remove(535)
        tree.delete(535)
        std.remove(430)
        tree.delete(430)
        std.remove(815)
        tree.delete(815)
        std.remove(499)
        tree.delete(499)
        std.remove(879)
        tree.delete(879)
        std.remove(459)
        tree.delete(459)
        std.remove(248)
        tree.delete(248)
        std.remove(816)
        tree.delete(816)
        var a: Set<Pair<Int, Any>> = tree.iter().toSet()
        var b: Set<Pair<Int, Any>> = std.toList().toSet()
        assertEquals(b, a)
    }
}